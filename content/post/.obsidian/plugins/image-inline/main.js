
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageToBase64Plugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/settings.ts
var import_obsidian6 = require("obsidian");

// src/coms/__init__.ts
var import_obsidian5 = require("obsidian");

// src/utils/editor.ts
var import_obsidian2 = require("obsidian");

// src/utils/base64.ts
var import_buffer2 = require("buffer");
var import_obsidian = require("obsidian");

// src/utils/resizeSize.ts
var import_buffer = require("buffer");
async function resizeImageByPercentage(imageBuffer, percentage) {
  const image = new Image();
  image.src = "data:image/png;base64," + imageBuffer.toString("base64");
  return new Promise((resolve, reject) => {
    image.onload = () => {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      if (!ctx) {
        return reject(new Error("Unable to get canvas context"));
      }
      const newWidth = Math.round(image.width * (percentage / 100));
      const newHeight = Math.round(image.height * (percentage / 100));
      canvas.width = newWidth;
      canvas.height = newHeight;
      ctx.drawImage(image, 0, 0, newWidth, newHeight);
      canvas.toBlob((blob) => {
        if (!blob) {
          return reject(
            new Error("Unable to convert canvas to Blob")
          );
        }
        const reader = new FileReader();
        reader.onloadend = () => {
          resolve(import_buffer.Buffer.from(reader.result));
        };
        reader.readAsArrayBuffer(blob);
      }, "image/png");
    };
    image.onerror = (err) => {
      reject(new Error("Unable to load image"));
    };
  });
}
async function resizingRulesCheck(buf, plugin) {
  if (!plugin.settings.enableResizing) {
    return 100;
  }
  const image = new Image();
  image.src = "data:image/png;base64," + buf.toString("base64");
  return new Promise((resolve, reject) => {
    image.onload = () => {
      const width = image.width;
      const height = image.height;
      const filesize = buf.length;
      if (!width || !height) {
        return reject(
          new Error("Unable to determine image dimensions")
        );
      }
      let minpercentage = 100;
      for (const [string, percentage] of plugin.settings.resizingRules) {
        if (!string) {
          continue;
        }
        try {
          if (string.includes("x")) {
            const [ruleWidth, ruleHeight] = string.split("x").map(Number);
            if (width >= ruleWidth && height >= ruleHeight) {
              minpercentage = Math.min(minpercentage, percentage);
            }
          } else {
            const size = Number(string);
            if (filesize >= size) {
              minpercentage = Math.min(minpercentage, percentage);
            }
          }
        } catch (e) {
          console.error("Error parsing resizing rules:", e);
        }
      }
      resolve(minpercentage);
    };
    image.onerror = (err) => {
      reject(new Error("Unable to load image"));
    };
  });
}
function getImageSizeAndFileSize(buf) {
  return new Promise((resolve, reject) => {
    if (!buf || buf.length === 0) {
      return reject(new Error("Invalid buffer"));
    }
    const image = new Image();
    image.src = "data:image/png;base64," + buf.toString("base64");
    image.onload = () => {
      const width = image.width;
      const height = image.height;
      const filesize = buf.length / 1024;
      if (!width || !height) {
        return reject(new Error("Unable to determine image dimensions"));
      }
      resolve({ width, height, filesize });
    };
    image.onerror = () => {
      reject(new Error("Unable to load image"));
    };
  });
}
async function checkThreshold(buf, plugin) {
  if (buf.length === 0) {
    return false;
  }
  if (!plugin.settings.convertBase64ByThresholdToggle) {
    return false;
  }
  const { filesize } = await getImageSizeAndFileSize(buf);
  const res = plugin.settings.convertBase64ByThreshold >= filesize == plugin.settings.convertBase64ByThresholdStrategy;
  if (res) {
    console.log("paste to base64 is ignored for this image");
  }
  return res;
}

// src/utils/base64.ts
async function toBase64(input, plugin) {
  let imageBuffer;
  if (typeof input === "string" && input.startsWith("http")) {
    const response = await fetch(input);
    const arrayBuffer = await response.arrayBuffer();
    imageBuffer = import_buffer2.Buffer.from(arrayBuffer);
  } else if (typeof input === "string") {
    imageBuffer = import_buffer2.Buffer.from(input);
  } else if (input instanceof import_obsidian.TFile) {
    const arrayBuffer = await input.vault.readBinary(input);
    imageBuffer = import_buffer2.Buffer.from(arrayBuffer);
  } else if (input instanceof ArrayBuffer) {
    imageBuffer = import_buffer2.Buffer.from(input);
  } else if (input instanceof Blob) {
    const arrayBuffer = await input.arrayBuffer();
    imageBuffer = import_buffer2.Buffer.from(arrayBuffer);
  } else {
    throw new Error("Unsupported input type");
  }
  const resizePercentage = await resizingRulesCheck(imageBuffer, plugin);
  console.log(`Resizing image by ${resizePercentage}% for ${input}`);
  const image = await resizeImageByPercentage(imageBuffer, resizePercentage);
  return image.toString("base64");
}
var globalCounter = 0;
function formatMarkdownBase64(base64String, altText) {
  if (!altText) {
    altText = "image" + globalCounter++;
  }
  if (!base64String.startsWith("data:image/")) {
    base64String = `data:image/png;base64,${base64String}`;
  }
  return `![${altText}](${base64String})`;
}

// src/utils/editor.ts
async function gatherClipboardItems(editor) {
  try {
    const items = await navigator.clipboard.read();
    return filterClipboardItems(items);
  } catch (err) {
    console.error("Failed to read clipboard contents: ", err);
    new import_obsidian2.Notice("Error accessing clipboard.");
    return [];
  }
}
async function filterClipboardItems(items) {
  let filteredItems = [];
  for (const clipboardItem of items) {
    for (const type of clipboardItem.types) {
      if (!type.startsWith("image")) {
        continue;
      }
      const blob = await clipboardItem.getType(type);
      filteredItems.push(blob);
    }
  }
  return filteredItems;
}
async function editorProcessItems(editor, items, plugin) {
  for (const item of items) {
    const base64 = await toBase64(item, plugin);
    const imgMarkdown = formatMarkdownBase64(base64, "") + "\n";
    const cursor = editor.getCursor();
    editor.replaceRange(imgMarkdown, cursor);
    const newCursorPos = {
      line: cursor.line + 1,
      ch: 0
    };
    editor.setCursor(newCursorPos);
  }
}

// src/coms/clipboard.ts
async function registerPaletteCommand(plugin) {
  plugin.addCommand({
    id: "paste-image-as-base64",
    name: "Paste image as Base64",
    editorCallback: async (editor) => {
      const items = await gatherClipboardItems(editor);
      if (items.length === 0) {
        return;
      }
      await editorProcessItems(editor, items, plugin);
    }
  });
}
async function registerOnPaste(plugin) {
  plugin.registerEvent(
    plugin.app.workspace.on(
      "editor-paste",
      async (evt, editor) => {
        var _a;
        if ((_a = evt.clipboardData) == null ? void 0 : _a.getData("_flagged")) {
          return;
        }
        if (!plugin.settings.convertOnPaste || !evt.clipboardData) {
          return;
        }
        const items = Array.from(
          evt.clipboardData.items
        );
        if (!items.every((item) => item.type.startsWith("image/"))) {
          return;
        }
        evt.preventDefault();
        items.forEach(async (item) => {
          var _a2, _b, _c;
          const file = item instanceof File ? item : item.getAsFile();
          if (!file) {
            new Error("No file found");
            return;
          }
          if (await checkThreshold(Buffer.from(await file.arrayBuffer()), plugin)) {
            let newClipboardEvent = new ClipboardEvent("paste", {
              bubbles: true,
              cancelable: true,
              clipboardData: new DataTransfer()
            });
            (_a2 = newClipboardEvent.clipboardData) == null ? void 0 : _a2.items.add(file);
            (_b = newClipboardEvent.clipboardData) == null ? void 0 : _b.setData("_flagged", "true");
            (_c = evt.target) == null ? void 0 : _c.dispatchEvent(newClipboardEvent);
            return;
          }
          const base64 = await toBase64(file, plugin);
          const filename = file.name || ``;
          const imgMarkdown = formatMarkdownBase64(base64, filename) + "\n";
          const cursor = editor.getCursor();
          editor.replaceRange(imgMarkdown, cursor);
          const newCursorPos = {
            line: cursor.line + 1,
            ch: 0
          };
          editor.setCursor(newCursorPos);
        });
      }
    )
  );
}

// src/coms/cursor.ts
var import_obsidian3 = require("obsidian");
function registerCursorListener(plugin) {
  plugin.registerInterval(
    window.setInterval(() => {
      if (!plugin.settings.autoAvoidExpansion) {
        return;
      }
      const activeView = plugin.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
      if (activeView && activeView.getViewType() === "markdown") {
        const editor = activeView.editor;
        if (editor) {
          checkCursorPosition(editor);
        }
      }
    }, 100)
  );
}
function checkCursorPosition(editor) {
  const cursor = editor.getCursor();
  if (cursor.ch < 300) {
    return;
  }
  const line = editor.getLine(cursor.line);
  if (!(line.startsWith("![") && line.includes("(data:image/"))) {
    return;
  }
  editor.setCursor({ line: cursor.line + 1, ch: 0 });
}

// src/coms/drag.ts
async function registerDrag(plugin) {
  plugin.registerDomEvent(
    document,
    "drop",
    async (event) => {
      var _a, _b;
      if (((_a = event.dataTransfer) == null ? void 0 : _a.getData("_flagged")) === "true") {
        return;
      }
      if (!plugin.settings.convertOnDrop) {
        return;
      }
      const editor = (_b = this.app.workspace.activeEditor) == null ? void 0 : _b.editor;
      if (!editor) {
        console.log("No editor found");
        return;
      }
      if (!event.dataTransfer || event.dataTransfer.files.length == 0) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      const itemsCopy = Array.from(event.dataTransfer.files);
      let cursor = editor.getCursor();
      itemsCopy.forEach(async (file, index) => {
        var _a2, _b2, _c, _d;
        console.log(
          `Processing file ${index + 1}/${(_a2 = event.dataTransfer) == null ? void 0 : _a2.files.length}: ${file.name} (${file.type})`
        );
        const arrayBuffer = await file.arrayBuffer();
        if (!file.type.startsWith("image") || await checkThreshold(Buffer.from(arrayBuffer), plugin)) {
          console.log("Redispatching default drop event for file: ", file.name);
          const newDropEvent = new DragEvent("drop", {
            bubbles: true,
            cancelable: true,
            dataTransfer: new DataTransfer()
          });
          (_b2 = newDropEvent.dataTransfer) == null ? void 0 : _b2.items.add(file);
          (_c = newDropEvent.dataTransfer) == null ? void 0 : _c.setData("_flagged", "true");
          (_d = event.target) == null ? void 0 : _d.dispatchEvent(newDropEvent);
          return;
        }
        const base64 = await toBase64(arrayBuffer, plugin);
        const imgMarkdown = formatMarkdownBase64(base64) + "\n";
        editor.replaceRange(imgMarkdown, cursor);
        cursor = { line: cursor.line + 1, ch: 0 };
        editor.setCursor(cursor);
      });
    },
    true
  );
}

// src/modals/convertAll.ts
var import_obsidian4 = require("obsidian");
var ConvertAllModal = class extends import_obsidian4.Modal {
  constructor(app, onConfirm) {
    super(app);
    this.skipInternalLinks = false;
    this.skipRemoteLinks = false;
    this.customFilters = [];
    this.forAllFiles = false;
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Convert All Images to Base64" });
    contentEl.createEl("p", {
      text: "Do you want to convert all images to base64? You can also add filter schemes to skip certain images."
    });
    new import_obsidian4.Setting(contentEl).setName("Skip links starting with ![[xxx]]").addToggle(
      (toggle) => toggle.setValue(this.skipInternalLinks).onChange((value) => {
        this.skipInternalLinks = value;
      })
    );
    new import_obsidian4.Setting(contentEl).setName("Skip remote image links").addToggle(
      (toggle) => toggle.setValue(this.skipRemoteLinks).onChange((value) => {
        this.skipRemoteLinks = value;
      })
    );
    new import_obsidian4.Setting(contentEl).setName("Filter Schemes").setDesc(
      "Comma-separated list of keywords to skip (e.g., http, data)"
    ).addText(
      (text) => text.setPlaceholder("Enter filter schemes").onChange((value) => {
        this.customFilters = value.split(",").map((filter) => filter.trim());
      })
    );
    new import_obsidian4.Setting(contentEl).setName("For all files (Dangerous)").addToggle(
      (toggle) => toggle.setValue(this.forAllFiles).onChange((value) => {
        this.forAllFiles = value;
      })
    );
    new import_obsidian4.Setting(contentEl).addButton(
      (button) => button.setButtonText("Convert").setCta().onClick(() => {
        this.onConfirm({
          skipInternalLinks: this.skipInternalLinks,
          skipRemoteLinks: this.skipRemoteLinks,
          customFilters: this.customFilters,
          forAllFiles: this.forAllFiles
        });
        this.close();
      })
    ).addButton(
      (button) => button.setButtonText("Cancel").onClick(() => {
        this.close();
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/coms/__init__.ts
async function registerDeprecatedCommands(plugin) {
  if (!plugin.settings.enableDeprecatedMethods) {
    return;
  }
  new import_obsidian5.Notice(
    "Deprecated commands will be removed at a later major version.\n	convert-all-images-to-base64\n"
  );
  plugin.addCommand({
    id: "convert-all-images-to-base64",
    name: "Convert all image attachments to inline base64",
    editorCallback: async (editor) => {
      new ConvertAllModal(
        this.app,
        async (filters) => {
          let targetFiles;
          if (filters.forAllFiles) {
            targetFiles = this.app.vault.getFiles().filter(
              (file) => file.extension === "md"
            );
            console.log("Converting " + targetFiles.length + " files");
          } else {
            const afile = this.app.workspace.getActiveFile();
            if (!afile)
              return;
            targetFiles = [afile];
          }
          for (const file of targetFiles) {
            console.log("Converting file " + file.path);
            const content = await this.app.vault.read(file);
            const updatedContent = await this.convertAllImagesToBase64(
              content,
              file,
              filters
            );
            await this.app.vault.modify(file, updatedContent);
          }
          new import_obsidian5.Notice(
            "All image attachments have been converted to inline base64."
          );
        }
      ).open();
    }
  });
}
async function registerAllCommands(plugin) {
  await registerPaletteCommand(plugin);
  await registerOnPaste(plugin);
  await registerDrag(plugin);
  await registerCursorListener(plugin);
  await registerDeprecatedCommands(plugin);
}

// src/settings.ts
var currentDeprecatedMethodsFlag = false;
var DEFAULT_SETTINGS = {
  convertOnPaste: true,
  convertOnDrop: true,
  autoAvoidExpansion: false,
  convertBase64ByThresholdToggle: false,
  convertBase64ByThresholdStrategy: false,
  convertBase64ByThreshold: 0,
  enableResizing: false,
  resizingRules: [
    ["6000", 80],
    ["12000", 60]
  ],
  enableDeprecatedMethods: false
};
var ImageToBase64SettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian6.Setting(containerEl).setName("Convert on paste").setDesc("Convert images pasted into the editor to base64").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.convertOnPaste).onChange(async (value) => {
        this.plugin.settings.convertOnPaste = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Convert on drop").setDesc("Convert images dropped into the editor to base64").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.convertOnDrop).onChange(async (value) => {
        this.plugin.settings.convertOnDrop = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Prevent link expansion").setDesc(
      "Automatically prevent the expansion of base64 image links.                Currently only works with single images."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoAvoidExpansion).onChange(async (value) => {
        this.plugin.settings.autoAvoidExpansion = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Convert base64 by threshold").setDesc("Flip the toggle to enable this feature, does not work for batches").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.convertBase64ByThresholdToggle).onChange(async (value) => {
        this.plugin.settings.convertBase64ByThresholdToggle = value;
        await this.plugin.saveSettings();
        thresholdValue.settingEl.style.display = value ? "block" : "none";
        thresholdDirection.settingEl.style.display = value ? "block" : "none";
      })
    );
    const thresholdDirection = new import_obsidian6.Setting(containerEl).setName("How is it handled?").setDesc("Choose whether to trigger if its larger or smaller than the threshold").addDropdown(
      (dropdown) => dropdown.addOption("larger", "Larger than threshold").addOption("smaller", "Smaller than threshold").setValue(this.plugin.settings.convertBase64ByThresholdStrategy ? "larger" : "smaller").onChange(async (value) => {
        this.plugin.settings.convertBase64ByThresholdStrategy = value === "larger";
        await this.plugin.saveSettings();
      })
    );
    const thresholdValue = new import_obsidian6.Setting(containerEl).setName("Threshold (KB)").setDesc("Convert images larger than this size (in KB) to base64").addText(
      (text) => text.setPlaceholder("Enter threshold in KB").setValue(String(this.plugin.settings.convertBase64ByThreshold || DEFAULT_SETTINGS.convertBase64ByThreshold)).onChange(async (value) => {
        const numValue = Number(value);
        if (!isNaN(numValue)) {
          this.plugin.settings.convertBase64ByThreshold = numValue;
          await this.plugin.saveSettings();
        }
      })
    );
    thresholdValue.settingEl.style.display = this.plugin.settings.convertBase64ByThresholdToggle ? "block" : "none";
    thresholdDirection.settingEl.style.display = this.plugin.settings.convertBase64ByThresholdToggle ? "block" : "none";
    let resizingRulesList = [];
    new import_obsidian6.Setting(containerEl).setName("Enable resizing").setDesc("Enable resizing of base64 image links").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableResizing).onChange(async (value) => {
        this.plugin.settings.enableResizing = value;
        await this.plugin.saveSettings();
        resizingRulesAddButton.settingEl.style.display = value ? "block" : "none";
        resizingRulesList.forEach((rule) => {
          rule.settingEl.style.display = value ? "block" : "none";
        });
        this.display();
      })
    );
    let resizingRulesAddButton = new import_obsidian6.Setting(containerEl).setName("Resizing rules").setDesc("Rules for resizing base64 image links").addButton((button) => {
      button.setButtonText("Add Rule").onClick(() => {
        const rule = ["", 0];
        this.plugin.settings.resizingRules.push(rule);
        this.plugin.saveSettings();
        this.display();
      });
    });
    this.plugin.settings.resizingRules.forEach((rule, index) => {
      const ruleType = rule[0].includes("x") ? "X x Y" : "Size";
      const ruleTypeColor = ruleType === "X x Y" ? "red" : "green";
      const ruleSetting = new import_obsidian6.Setting(containerEl);
      resizingRulesList.push(ruleSetting);
      const ruleLabel = ruleSetting.settingEl.createEl("span", {
        text: ruleType,
        attr: {
          style: `color: ${ruleTypeColor}; margin-right: 10px; float: left;`
        }
      });
      ruleSetting.settingEl.insertBefore(ruleLabel, ruleSetting.settingEl.firstChild);
      ruleSetting.addText(
        (text) => text.setPlaceholder("Dimension/Size").setValue(rule[0]).onChange(async (value) => {
          rule[0] = value;
          await this.plugin.saveSettings();
          ruleLabel.textContent = rule[0].includes("x") ? "X x Y" : "Size";
        })
      ).addText(
        (text) => text.setPlaceholder("Resize%").setValue(rule[1].toString()).onChange(async (value) => {
          rule[1] = Number(value);
          await this.plugin.saveSettings();
        })
      ).addButton((button) => {
        button.setButtonText("Remove").onClick(async () => {
          this.plugin.settings.resizingRules.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        });
      });
    });
    resizingRulesAddButton.settingEl.style.display = this.plugin.settings.enableResizing ? "block" : "none";
    resizingRulesList.forEach((rule) => {
      rule.settingEl.style.display = this.plugin.settings.enableResizing ? "block" : "none";
    });
    let deprecatedToggle = new import_obsidian6.Setting(containerEl);
    deprecatedToggle.setName("Enable deprecated methods").setDesc("Enables deprecated methods if not already loaded. More flips will take effect on next restart.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableDeprecatedMethods).onChange(async (value) => {
        this.plugin.settings.enableDeprecatedMethods = value;
        await this.plugin.saveSettings();
        if (value && !currentDeprecatedMethodsFlag) {
          registerDeprecatedCommands(this.plugin);
          currentDeprecatedMethodsFlag = true;
        }
      })
    );
  }
};

// src/main.ts
var ImageToBase64Plugin = class extends import_obsidian7.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ImageToBase64SettingTab(this.app, this));
    await registerAllCommands(this);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

/* nosourcemap */